"""Configuration helper CLI commands."""

from __future__ import annotations

from textwrap import dedent

import typer
from arbit.config import settings
from arbit.engine.triangle import (
    discover_triangles_from_markets as _discover_triangles_from_markets,
)

from ..core import app, log
from ..utils import _build_adapter, _log_balances, _triangles_for


@app.command("config:recommend")
@app.command("config_recommend")
def config_recommend(venue: str = "alpaca") -> None:
    """Suggest starter Strategy settings based on current venue data."""

    adapter = _build_adapter(venue, settings)
    _log_balances(venue, adapter)
    triangles = _triangles_for(venue)
    tri = triangles[0]
    legs = [tri.leg_ab, tri.leg_bc, tri.leg_ac]
    takers: list[float] = []
    for symbol in legs:
        try:
            takers.append(adapter.fetch_fees(symbol)[1])
        except Exception:
            takers.append(0.001)
    avg_taker = sum(takers) / max(len(takers), 1)
    thresh_bps = int((avg_taker * 3 * 1e4) + 5)

    try:
        min_cost_ab = float(adapter.min_notional(tri.leg_ab))
    except Exception:
        min_cost_ab = 1.0
    notional_usd = max(2.0 * min_cost_ab, 5.0)

    rec = {
        "NOTIONAL_PER_TRADE_USD": int(round(notional_usd)),
        "NET_THRESHOLD_BPS": max(thresh_bps, 10),
        "MAX_SLIPPAGE_BPS": 8,
        "DRY_RUN": True,
    }
    log.info(
        "Recommend: NOTIONAL_PER_TRADE_USD=%s NET_THRESHOLD_BPS=%s MAX_SLIPPAGE_BPS=%s DRY_RUN=%s",
        rec["NOTIONAL_PER_TRADE_USD"],
        rec["NET_THRESHOLD_BPS"],
        rec["MAX_SLIPPAGE_BPS"],
        str(rec["DRY_RUN"]).lower(),
    )
    log.info(
        "Reference: avg_taker=%d bps legs=%s min_notional_ab=%.6g",
        int(round(avg_taker * 1e4)),
        ",".join(legs),
        min_cost_ab,
    )


@app.command("config:discover")
@app.command("config_discover")
def config_discover(
    venue: str = "kraken",
    write_env: bool = False,
    env_path: str = ".env",
) -> None:
    """Discover supported triangles for a venue and optionally write to .env."""

    adapter = _build_adapter(venue, settings)
    try:
        markets = adapter.load_markets()
    except Exception as exc:
        log.error("load_markets failed for %s: %s", venue, exc)
        raise SystemExit(1)
    triples = _discover_triangles_from_markets(markets)
    typer.echo(
        f"{venue} triangles={len(triples)} "
        + (f"first={'|'.join(triples[0])}" if triples else "")
    )
    if write_env:
        try:
            with open(env_path, "a", encoding="utf-8") as handle:
                handle.write(
                    dedent(
                        """
                        # Auto-generated by `python -m arbit.cli config:discover`
                        TRIANGLES_BY_VENUE="""
                    ).lstrip()
                )
                handle.write(str({venue: triples}))
                handle.write("\n")
        except Exception as exc:
            log.error("failed to write %s: %s", env_path, exc)


__all__ = ["config_recommend", "config_discover"]

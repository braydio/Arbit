"""Configuration helper CLI commands."""

from __future__ import annotations

import ast
import json
import os
from collections.abc import Sequence
from pathlib import Path
from tempfile import NamedTemporaryFile

import typer
from arbit.config import settings
from arbit.engine.triangle import (
    discover_triangles_from_markets as _discover_triangles_from_markets,
)

from ..core import app, log
from ..utils import _build_adapter, _log_balances, _triangles_for


def _parse_triangles_env(raw: str) -> dict[str, list[list[str]]]:
    """Return a normalised triangles mapping parsed from *raw* env text."""

    raw = raw.strip()
    if not raw:
        return {}
    try:
        parsed = json.loads(raw)
    except json.JSONDecodeError:
        try:
            parsed = ast.literal_eval(raw)
        except (SyntaxError, ValueError):
            return {}
    if not isinstance(parsed, dict):
        return {}
    normalised: dict[str, list[list[str]]] = {}
    for venue, triangles in parsed.items():
        if not isinstance(venue, str):
            continue
        if isinstance(triangles, (list, tuple)):
            cleaned: list[list[str]] = []
            for triangle in triangles:
                if isinstance(triangle, (list, tuple)) and len(triangle) == 3:
                    cleaned.append(
                        [str(triangle[0]), str(triangle[1]), str(triangle[2])]
                    )
            normalised[venue] = cleaned
    return normalised


def _update_env_triangles(
    env_path: str | os.PathLike[str],
    venue: str,
    triangles: Sequence[Sequence[str]],
) -> None:
    """Persist discovered *triangles* for *venue* into the ``.env`` file.

    Args:
        env_path: Path to the environment file to update.
        venue: Exchange venue identifier whose triangles should be stored.
        triangles: Collection of triangles discovered for ``venue``.

    Raises:
        OSError: Propagated if the target file cannot be written.
    """

    path = Path(env_path).expanduser()
    path.parent.mkdir(parents=True, exist_ok=True)

    try:
        current_text = path.read_text(encoding="utf-8")
    except FileNotFoundError:
        current_text = ""

    lines = current_text.splitlines(keepends=True)
    target_key = "TRIANGLES_BY_VENUE"
    comment_line = "# Auto-generated by `python -m arbit.cli config:discover`\n"
    comment_marker = comment_line.strip()
    insert_index: int | None = None
    existing_value: str | None = None
    new_lines: list[str] = []

    for line in lines:
        stripped = line.strip()
        if not stripped:
            new_lines.append(line)
            continue
        if stripped == comment_marker:
            insert_index = len(new_lines)
            continue
        key, sep, value = stripped.partition("=")
        if sep and key.strip() == target_key:
            insert_index = len(new_lines)
            existing_value = value
            continue
        new_lines.append(line)

    existing = _parse_triangles_env(existing_value or "")
    payload = {**existing}
    payload[venue] = [[str(leg) for leg in triangle] for triangle in triangles]

    assignment = f"{target_key}={json.dumps(payload, separators=(',', ':'))}\n"
    block = [comment_line, assignment]

    if insert_index is None:
        insert_index = len(new_lines)
        if new_lines and not new_lines[-1].endswith("\n"):
            new_lines[-1] = new_lines[-1] + "\n"
        if new_lines and new_lines[-1].strip():
            new_lines.append("\n")
    new_lines[insert_index:insert_index] = block

    new_content = "".join(new_lines)
    if not new_content.endswith("\n"):
        new_content += "\n"

    tmp_path: Path | None = None
    try:
        with NamedTemporaryFile(
            "w", encoding="utf-8", dir=str(path.parent), delete=False
        ) as handle:
            handle.write(new_content)
            tmp_path = Path(handle.name)
        os.replace(str(tmp_path), str(path))
    finally:
        if tmp_path is not None and tmp_path.exists():
            tmp_path.unlink(missing_ok=True)


@app.command("config:recommend")
@app.command("config_recommend")
def config_recommend(venue: str = "alpaca") -> None:
    """Suggest starter Strategy settings based on current venue data."""

    adapter = _build_adapter(venue, settings)
    _log_balances(venue, adapter)
    triangles = _triangles_for(venue)
    tri = triangles[0]
    legs = [tri.leg_ab, tri.leg_bc, tri.leg_ac]
    takers: list[float] = []
    for symbol in legs:
        try:
            takers.append(adapter.fetch_fees(symbol)[1])
        except Exception:
            takers.append(0.001)
    avg_taker = sum(takers) / max(len(takers), 1)
    thresh_bps = int((avg_taker * 3 * 1e4) + 5)

    try:
        min_cost_ab = float(adapter.min_notional(tri.leg_ab))
    except Exception:
        min_cost_ab = 1.0
    notional_usd = max(2.0 * min_cost_ab, 5.0)

    rec = {
        "NOTIONAL_PER_TRADE_USD": int(round(notional_usd)),
        "NET_THRESHOLD_BPS": max(thresh_bps, 10),
        "MAX_SLIPPAGE_BPS": 8,
        "DRY_RUN": True,
    }
    log.info(
        "Recommend: NOTIONAL_PER_TRADE_USD=%s NET_THRESHOLD_BPS=%s MAX_SLIPPAGE_BPS=%s DRY_RUN=%s",
        rec["NOTIONAL_PER_TRADE_USD"],
        rec["NET_THRESHOLD_BPS"],
        rec["MAX_SLIPPAGE_BPS"],
        str(rec["DRY_RUN"]).lower(),
    )
    log.info(
        "Reference: avg_taker=%d bps legs=%s min_notional_ab=%.6g",
        int(round(avg_taker * 1e4)),
        ",".join(legs),
        min_cost_ab,
    )


@app.command("config:discover")
@app.command("config_discover")
def config_discover(
    venue: str = "kraken",
    write_env: bool = False,
    env_path: str = ".env",
) -> None:
    """Discover supported triangles for a venue and optionally write to .env."""

    adapter = _build_adapter(venue, settings)
    try:
        markets = adapter.load_markets()
    except Exception as exc:
        log.error("load_markets failed for %s: %s", venue, exc)
        raise SystemExit(1)
    triples = _discover_triangles_from_markets(markets)
    typer.echo(
        f"{venue} triangles={len(triples)} "
        + (f"first={'|'.join(triples[0])}" if triples else "")
    )
    if write_env:
        try:
            _update_env_triangles(env_path, venue, triples)
        except OSError as exc:
            log.error("failed to write %s: %s", env_path, exc)


__all__ = ["config_recommend", "config_discover"]
